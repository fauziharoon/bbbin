#!/usr/bin/env ruby

require 'tempfile'
require 'optparse'

# Parse cmd line options
USAGE = "Usage: trees_ml [-r <repetitions>] [-d <directory>] [-a <phyml_arguments>] <fasta_multiple_sequence_alignment>"
options = {
  :repetitions => 0,
  :directory => 'trees_ml'
}
OptionParser.new do |opts|
  opts.banner = USAGE
  
  opts.on("-r", "--repetitions REPETITIONS", Integer, "Number of bootstrap repetitions to do (default likelihood only)") do |v|
    options[:repetitions] = v
  end
  
  opts.on('-d', '--directory DIRECTORY', String, "Directory of the working and output files") do |v|
    options[:directory] = v
  end

  opts.on('-a', '--arguments ARGUMENTS', String, "Arguments passed to phyml directly") do |v|
     options[:arguments] = v
  end
end.parse!

if ARGV.length != 1
  $stderr.puts USAGE
  exit
end
fasta_file_input = ARGV[0]

# All files associated end up in this directory
dir = options[:directory]

system("mkdir #{dir}") or raise
system("sreformat phylip #{fasta_file_input} >#{dir}/ununiqued.phylip")
Dir.chdir(dir)
system('uniqify_phylip.rb <ununiqued.phylip >uniqued.phylip')

input = 'uniqued.phylip'
stdout = 'uniqued_phylip_stdout.txt'

# If repetitions is defined do that, otherwise do the default likelihood test
cmd = "error if you see this"
if options[:repetitions] and options[:repetitions] > 0
#cmd = "phyml -d aa -i #{input} -b #{options[:repetitions]} #{options[:arguments]} >#{stdout}"
# raxmlHPC -s TF105399.phy -n TF105399.raxml.singleTree -c 4 -f d -m PROTGAMMAJTT
cmd = "mpirun -np 10 raxmlHPC-MPI -s #{input} -n #{stdout} -f d -m PROTGAMMAJTT -N #{options[:repetitions]} -p 234534251 -c 4 >RAxML.stdout"
else
raise Exception, "Not implemented!!"
#cmd = "phyml -d aa -b -1 -i #{input} #{options[:arguments]} >#{stdout}"
end
puts "Running raxml: #{cmd}";
system(cmd)

#convert the names on the tree back to sensible land
Dir.chdir('..')
cmd = "ununiqify_standard_tree.rb #{fasta_file_input} #{dir}/uniqued.phylip #{dir}/RAxML_bestTree.phylip_phyml_tree.txt >#{dir}/ml.tree";
puts "Running uniniquify_treeing: #{cmd}"
system(cmd)
